import com.github.rjeschke.txtmark.*
import org.apache.tools.ant.filters.*


apply plugin: "base"
apply plugin:  "groovy"
apply plugin:  "maven"

apply from: "versions.gradle"

if (hasProperty('conf')) {
    System.err.println "Using configuration data from ${conf}"
    File confFile = new File(conf)
    if (! confFile.exists()) {
        throw new Exception("No configuration file ${conf} found.")
    }
    apply from: conf
} else {
    File confFile = new File("conf.gradle")
    if (! confFile.exists()) {
        throw new Exception("No configuration file ${conf} found.")
    }
    System.err.println "Using conf.gradle for configuration"
    apply from: "conf.gradle"
}


group = "org.homermultitext"
version = '0.10.0'


if (project.hasProperty('pub')) {
  System.err.print "Using configuration data from ${pub}"
  File confFile = new File(pub)
  if (! confFile.exists()) {
    throw new Exception("No publication configuration file ${pub} found.")
  } else {
    apply from: pub
  }
} else {
  File confFile = new File("pub.gradle")
  if (! confFile.exists()) {
    throw new Exception("No publication configuration file ${confFile} found.")
  } else {
    println "Using default configuration in 'pub.gradle'"
    apply from: "pub.gradle"
  }
}

buildscript {
  apply from: "versions.gradle"
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath group: 'com.github.rjeschke', name: 'txtmark', version: '0.11'
  }
}



repositories {
    mavenCentral()
    maven {
        url "http://beta.hpcc.uh.edu/nexus/content/groups/public"
    }
}

dependencies {
  compile group: 'org.codehaus.groovy', name: 'groovy-all', version: groovyVersion

  compile group: 'edu.harvard.chs', name : 'cite' , version: versionMap["cite"]
  compile group: 'org.homermultitext', name : 'citemgr' , version: versionMap["citemgr"]
  compile group: 'edu.holycross.shot', name : 'greekcommon' , version: versionMap["greekcommon"]
  compile group: "commons-io", name: "commons-io", version: "2.4"
  compile group: 'edu.holycross.shot', name: 'safecsv', version : versionMap["safecsv"]
  compile group: 'net.sf.opencsv', name: 'opencsv', version : versionMap["opencsv"]


  compile group: 'edu.holycross.shot', name : 'hocuspocus' , version: versionMap['hocuspocus']


  //testCompile group: 'junit', name: 'junit', version: junitVersion
  testCompile 'junit:junit:4.11'
  testCompile 'org.concordion:concordion:1.4.4'

}



task vmap {
  description = "Prints out version info for key dependencies."
}
vmap.doLast {
  println "\nDependencies in hmt-utils ${version}:"
  versionMap.keySet().sort().each { k ->
    print k
    Integer spaces = 15 - k.size()
    Integer idx = 0
    while(idx < spaces) {
      print " "
      idx++
    }
    println versionMap[k]
  }
  println ""
}


uploadArchives {
    repositories.mavenDeployer {
        repository(url: nexusRepo) {
            authentication (userName: nexusUser, password: nexusPassword)
        }
    }
}




// for specs with concordion:
sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'src'
        }
    }
    test {
        java {
	  srcDir "specs/java"
        }
        resources {
	  srcDir "${buildDir}/specs"
        }
    }
}

task cpResources(type: Copy) {
  from "specs/resources"
  into "${buildDir}/specs"
}

task setUpResources(dependsOn: cpResources) {
}
setUpResources.doLast {
  //println "READING FILE TREE FROM " + mdSrc
  FileTree tree = fileTree(mdSrc) {
    include "**/*.md"
  }
  tree.visit { f ->
    if (f.relativePath.isFile()) {
      File inFile = new File("${mdSrc}/${f.relativePath}")
      //println "Need to work on " + inFile
      def segs = f.relativePath.getSegments()
      String treePath = "${buildDir}/specs"
      Integer limit =  segs.size() - 1
      segs.eachWithIndex { s, i ->
	if (i < limit) {
	  treePath = "${treePath}/${s}"
	  File nxtDir = new File(treePath)
	  if (! nxtDir.exists()) {
	    nxtDir.mkdir()
	  }
	}
      }
      File outDir = new File(treePath)
      String htmlFileName = f.relativePath.getLastName().replaceFirst(/.md$/,".html")
      File htmlFile = new File(outDir, htmlFileName)
      //println "Created ${htmlFile}"

      String body = Processor.process(inFile.getText("UTF-8"),Configuration.DEFAULT)
      htmlFile.setText("${htmlPreface}${body}${htmlEnd}", "UTF-8")
    }
  }
}


test.dependsOn setUpResources
test {
    systemProperties 'concordion.output.dir': file("${buildDir}/concordion-results")

}

task addVersion(){
}
addVersion.doLast {
  tokenMap["version"] = version
  StringBuilder deps = new StringBuilder()
  versionMap.keySet().sort().each { k ->
    deps.append("<tr><td>${k}</td><td>${versionMap[k]}</td></tr>\n")
  }
  tokenMap["deps"] = deps.toString()
}

task conc(type: Copy, dependsOn: [test, addVersion]) {
//task conc(type: Copy) {
  description "Filter copies final version of concordion output for pretty CSS formatting."
  from "${buildDir}/concordion-results"
  into "${buildDir}/concordion-formatted"
  filter(ReplaceTokens, tokens: tokenMap)
}
